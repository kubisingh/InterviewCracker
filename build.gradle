// Top-level build file where you can add configuration options common to all sub-projects/modules.
import org.ajoberstar.grgit.*
import groovy.swing.SwingBuilder
buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.ajoberstar:gradle-git:0.8.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def username
def pass

def javafolder = file("$rootDir/modules/javafeatures")
def androidfolder = file("$rootDir/modules/androidfeatures")
def kotlinfolder = file("$rootDir/modules/kotlinfeatures")
def corefolder = file("$rootDir/modules/corefeatures")


def javafolderSrc = file("$rootDir/modules/javafeatures/src")
def androidfolderSrc = file("$rootDir/modules/androidfeatures/src")
def kotlinfolderSrc = file("$rootDir/modules/kotlinfeatures/src")
def corefolderSrc = file("$rootDir/modules/corefeatures/src")

def auth

task gitCloneRepo() {

    if(corefolder.exists() && !corefolderSrc.exists()){
        corefolder.delete()
    }
    if(javafolder.exists() && !javafolderSrc.exists()){
        javafolder.delete()
    }
    if(androidfolder.exists() && !androidfolderSrc.exists()){
        androidfolder.delete()
    }
    if(kotlinfolder.exists() && !kotlinfolderSrc.exists()){
        kotlinfolder.delete()
    }
    if (!corefolder.exists()) {
        def console = System.console()
        if (console) {
            printf("------Please Enter Git Credentials-----")
            println("")
            username = console.readLine("> Enter your username : ")
            pass = console.readPassword("> Enter your Password (Not Visible): ")
            auth = new Credentials(username: username, password: pass)
        } else {
            new SwingBuilder().edt {
                dialog(modal: true, title: "Enter Git Credentials", alwaysOnTop: true, resizable: false,
                        locationRelativeTo: null, pack: true, show: true) {
                    vbox {
                        label(text: "Enter Git Username:")
                        textField id: "usertxt", input = textField()
                        label(text: "Enter Git Password:")
                        textField id: "passtxt", input = passwordField()
                        button(defaultButton: true, text: "OK", actionPerformed: {
                            auth = new Credentials(username: usertxt.text, password: passtxt.text)
                            dispose()
                        })
                    }
                }
            }
        }
    }
    if (auth != null) {
        if (!corefolder.exists()) {
            Grgit.clone(dir: corefolder, uri: 'https://github.com/kubisingh/corefeatures.git', credentials: auth)
        }
        if (!javafolder.exists()) {
            Grgit.clone(dir: javafolder, uri: 'https://github.com/kubisingh/javafeatures.git', credentials: auth)
        }
        if (!androidfolder.exists()) {
            Grgit.clone(dir: androidfolder, uri: 'https://github.com/kubisingh/androidfeatures.git', credentials: auth)
        }
        if (!kotlinfolder.exists()) {
            Grgit.clone(dir: kotlinfolder, uri: 'https://github.com/kubisingh/kotlinfeatures.git', credentials: auth)
        }
    } else {
        if (!corefolder.exists()) {
            println("-----------Invalid Git Credentials----------")
            println("-------ReEnter command--------")
            println("")
        }
    }

}

